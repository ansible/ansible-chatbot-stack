---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ansible-chatbot-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: ansible-chatbot-server-env-properties
immutable: false
data:
  INFERENCE_MODEL: "granite-3.3-8b-instruct"
  # TODO: Use Secrets instead.
  VLLM_API_TOKEN: ""
  # TODO: Use Secrets instead.
  VLLM_URL: ''
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ansible-chatbot-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ansible-chatbot
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ansible-chatbot
    spec:
      imagePullSecrets:
      - name: quay-pull-secret
      containers:
      - name: ansible-chatbot
        # TODO: Just using a temporal container. Change it to the final one, with access controls.
        image: ansible-chatbot:aap-0.2.9
        imagePullPolicy: IfNotPresent
        env:
          - name: LLAMA_STACK_CONFIG_DIR
            value: /.llama/data/
          - name: EMBEDDING_MODEL
            value: /.llama/data/embeddings_model
        envFrom:
          - configMapRef:
              name: "ansible-chatbot-server-env-properties"
        ports:
          - containerPort: 8321
        volumeMounts:
          - name: ansible-chatbot-storage
            mountPath: /.llama/data
      initContainers:
      - name: init-rag-vector-db
        image: quay.io/ansible/aap-rag-content:latest
        command:
        - /bin/bash
        - -c
        - |
          echo "Initialize RAG vector database"
          MOUNTPATH=/.llama/data
          if [[ ! -d ${MOUNTPATH} ]]; then
            echo "Volume mount path is not found."
            exit 1
          fi
          DESTDIR=${MOUNTPATH}/distributions/ansible-chatbot
          mkdir -p ${DESTDIR}
          cd /rag/llama_stack_vector_db
          diff faiss_store.db.gz.sha256 ${DESTDIR}/faiss_store.db.gz.sha256
          if [[ $? != 0 ]]; then
            gzip -cd faiss_store.db.gz > ${DESTDIR}/aap_faiss_store.db
            if [[ $? != 0 ]]; then
              echo "Failed to install new vector database file."
              exit 1
            fi
            cp faiss_store.db.gz.sha256 ${DESTDIR}
            echo "Latest vector database file has been installed."
          else
            echo "Latest vector database file already up-to-date and installed."
          fi
          ls -l ${DESTDIR}/aap_faiss_store.db
          cat ${DESTDIR}/faiss_store.db.gz.sha256
          echo "Initialize embedding model"
          cd /rag
          diff embeddings_model/config.json ${MOUNTPATH}/embeddings_model/config.json
          if [[ $? != 0 ]]; then
            rm -rf ${MOUNTPATH}/embeddings_model
            cp -r embeddings_model ${MOUNTPATH}
            if [[ $? != 0 ]]; then
              echo "Failed to install embedding model."
              exit 1
            fi
            echo "Latest embeddings model has been installed."
          else
            echo "Latest embeddings model already up-to-date and installed."
          fi
          cat ${MOUNTPATH}/embeddings_model/config.json
        volumeMounts:
          - name: ansible-chatbot-storage
            mountPath: /.llama/data
      volumes:
      - name: ansible-chatbot-storage
        persistentVolumeClaim:
          claimName: ansible-chatbot-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: ansible-chatbot-service
spec:
  selector:
    app.kubernetes.io/name: ansible-chatbot
  ports:
  - protocol: TCP
    port: 8321
    targetPort: 8321
  type: ClusterIP
